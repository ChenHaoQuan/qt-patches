diff -Naur qt-4.8.6-original/mkspecs/win32-msvc2013/qmake.conf qt-4.8.6/mkspecs/win32-msvc2013/qmake.conf
--- qt-4.8.6-original/mkspecs/win32-msvc2013/qmake.conf	2014-04-10 20:37:12.000000000 +1000
+++ qt-4.8.6/mkspecs/win32-msvc2013/qmake.conf	2014-12-11 21:26:49.588354200 +1100
@@ -59,8 +59,8 @@
 QMAKE_LFLAGS_RELEASE    = /INCREMENTAL:NO
 QMAKE_LFLAGS_RELEASE_WITH_DEBUGINFO = /DEBUG /OPT:REF
 QMAKE_LFLAGS_DEBUG      = /DEBUG
-QMAKE_LFLAGS_CONSOLE    = /SUBSYSTEM:CONSOLE
-QMAKE_LFLAGS_WINDOWS    = /SUBSYSTEM:WINDOWS
+QMAKE_LFLAGS_CONSOLE    = /SUBSYSTEM:CONSOLE,5.01
+QMAKE_LFLAGS_WINDOWS    = /SUBSYSTEM:WINDOWS,5.01
 QMAKE_LFLAGS_EXE        = \"/MANIFESTDEPENDENCY:type=\'win32\' name=\'Microsoft.Windows.Common-Controls\' version=\'6.0.0.0\' publicKeyToken=\'6595b64144ccf1df\' language=\'*\' processorArchitecture=\'*\'\"
 QMAKE_LFLAGS_DLL        = /DLL
 QMAKE_LFLAGS_LTCG       = /LTCG
diff -Naur qt-4.8.6-original/src/3rdparty/javascriptcore/JavaScriptCore/wtf/MathExtras.h qt-4.8.6/src/3rdparty/javascriptcore/JavaScriptCore/wtf/MathExtras.h
--- qt-4.8.6-original/src/3rdparty/javascriptcore/JavaScriptCore/wtf/MathExtras.h	2014-04-10 20:37:12.000000000 +1000
+++ qt-4.8.6/src/3rdparty/javascriptcore/JavaScriptCore/wtf/MathExtras.h	2014-12-11 21:25:28.971504200 +1100
@@ -121,7 +121,7 @@
 
 #endif
 
-#if COMPILER(MSVC) && _MSC_VER < 1800
+#if COMPILER(MSVC) &&  _MSC_VER < 1800
 
 inline bool isinf(double num) { return !_finite(num) && !_isnan(num); }
 inline bool isnan(double num) { return !!_isnan(num); }
@@ -166,7 +166,7 @@
 #define fmod(x, y) wtf_fmod(x, y)
 #define pow(x, y) wtf_pow(x, y)
 
-#endif // COMPILER(MSVC)
+#endif // COMPILER(MSVC) && _MSC_VER < 1800
 
 inline double deg2rad(double d)  { return d * piDouble / 180.0; }
 inline double rad2deg(double r)  { return r * 180.0 / piDouble; }
diff -Naur qt-4.8.6-original/src/3rdparty/webkit/Source/JavaScriptCore/wtf/HashSet.h qt-4.8.6/src/3rdparty/webkit/Source/JavaScriptCore/wtf/HashSet.h
--- qt-4.8.6-original/src/3rdparty/webkit/Source/JavaScriptCore/wtf/HashSet.h	2014-04-10 20:37:12.000000000 +1000
+++ qt-4.8.6/src/3rdparty/webkit/Source/JavaScriptCore/wtf/HashSet.h	2014-12-11 21:25:28.987130100 +1100
@@ -174,12 +174,23 @@
         return m_impl.template contains<T, Adapter>(value);
     }
 
+	/*
     template<typename T, typename U, typename V>
     inline pair<typename HashSet<T, U, V>::iterator, bool> HashSet<T, U, V>::add(const ValueType& value)
     {
         return m_impl.add(value);
     }
+	*/
+	// fix
+	template<typename T, typename U, typename V>
+	inline pair<typename HashSet<T, U, V>::iterator, bool> HashSet<T, U, V>::add(const ValueType& value)
+	{
+		typedef typename HashSet<T, U, V>::iterator iter_type;
+		auto& temp = m_impl.add(value);
+		return make_pair((iter_type)temp.first, temp.second);
+	}
 
+	/*
     template<typename Value, typename HashFunctions, typename Traits>
     template<typename T, typename HashTranslator>
     inline pair<typename HashSet<Value, HashFunctions, Traits>::iterator, bool>
@@ -188,6 +199,18 @@
         typedef HashSetTranslatorAdapter<ValueType, ValueTraits, T, HashTranslator> Adapter;
         return m_impl.template addPassingHashCode<T, T, Adapter>(value, value);
     }
+	*/
+	// fix
+	template<typename Value, typename HashFunctions, typename Traits>
+	template<typename T, typename HashTranslator>
+	inline pair<typename HashSet<Value, HashFunctions, Traits>::iterator, bool>
+	HashSet<Value, HashFunctions, Traits>::add(const T& value)
+	{
+		typedef HashSetTranslatorAdapter<ValueType, ValueTraits, T, HashTranslator> Adapter;
+		typedef typename HashSet<Value, HashFunctions, Traits>::iterator iter_type;
+		auto& temp = m_impl.template addPassingHashCode<T, T, Adapter>(value, value);
+		return make_pair((iter_type)temp.first, temp.second);
+	}
 
     template<typename T, typename U, typename V>
     inline void HashSet<T, U, V>::remove(iterator it)
diff -Naur qt-4.8.6-original/src/3rdparty/webkit/Source/JavaScriptCore/wtf/MathExtras.h qt-4.8.6/src/3rdparty/webkit/Source/JavaScriptCore/wtf/MathExtras.h
--- qt-4.8.6-original/src/3rdparty/webkit/Source/JavaScriptCore/wtf/MathExtras.h	2014-04-10 20:37:12.000000000 +1000
+++ qt-4.8.6/src/3rdparty/webkit/Source/JavaScriptCore/wtf/MathExtras.h	2014-12-11 21:25:28.987130100 +1100
@@ -110,7 +110,7 @@
 
 #endif
 
-#if COMPILER(MSVC) || (COMPILER(RVCT) && !(RVCT_VERSION_AT_LEAST(3, 0, 0, 0)))
+#if (COMPILER(MSVC) && _MSC_VER < 1800) || (COMPILER(RVCT) && !(RVCT_VERSION_AT_LEAST(3, 0, 0, 0)))
 
 // We must not do 'num + 0.5' or 'num - 0.5' because they can cause precision loss.
 static double round(double num)
@@ -135,7 +135,7 @@
 
 #endif
 
-#if COMPILER(MSVC)
+#if COMPILER(MSVC) && _MSC_VER < 1800
 // The 64bit version of abs() is already defined in stdlib.h which comes with VC10
 #if COMPILER(MSVC9_OR_LOWER)
 inline long long abs(long long num) { return _abs64(num); }
diff -Naur qt-4.8.6-original/src/corelib/kernel/qeventdispatcher_win.cpp qt-4.8.6/src/corelib/kernel/qeventdispatcher_win.cpp
--- qt-4.8.6-original/src/corelib/kernel/qeventdispatcher_win.cpp	2014-04-10 20:37:12.000000000 +1000
+++ qt-4.8.6/src/corelib/kernel/qeventdispatcher_win.cpp	2014-12-11 21:28:29.012623500 +1100
@@ -510,7 +510,7 @@
     UINT result = QS_TIMER | QS_INPUT | QS_RAWINPUT;
     // QTBUG 28513, QTBUG-29097, QTBUG-29435: QS_TOUCH, QS_POINTER became part of
     // QS_INPUT in Windows Kit 8. They should not be used when running on pre-Windows 8.
-#if defined(_MSC_VER) && _MSC_VER >= 1700
+#if defined(QS_TOUCH)
     if (QSysInfo::WindowsVersion < QSysInfo::WV_WINDOWS8)
         result &= ~(QS_TOUCH | QS_POINTER);
 #endif //  _MSC_VER >= 1700
